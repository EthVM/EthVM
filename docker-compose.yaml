version: '2.4'

networks:
  web:
    external: true
  back:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24

volumes:

  mongodb-volume:
  kafka-volume-1:
  zookeeper-volume:

  parity-volume:
    # Note:
    # If you're on Linux, use local-persist instead of a regular docker volume
    # This allows to persist downloaded blockchain data.
    # More info: https://github.com/CWSpear/local-persist
    #
    # driver: local-persist
    # driver_opts:
    #   name: "paritydb"
    #   mountpoint: "${PARITY_VOLUME_MOUNTPOINT}"

services:

  parity:
    image: parity/parity:v2.3.3
    networks:
      - back
    volumes:
      - parity-volume:/home/parity/.local/share/io.parity.ethereum/
    ports:
      - 8545:8545
      - 8546:8546
      - 30303:30303
    command: --tracing on --pruning archive --ws-interface 0.0.0.0 --ws-origins * --ws-hosts * --jsonrpc-interface 0.0.0.0 --min-peers=${PARITY_MIN_PEERS} --max-peers ${PARITY_MAX_PEERS}
    cpu_shares: 2048

  traefik:
    image: traefik:${TRAEFIK_VERSION}-alpine
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/config/traefik/traefik.dev.toml:/etc/traefik/traefik.toml
    networks:
      - web
      - back
    ports:
      - 80:80
      - 81:81
    cpu_shares: 256

  explorer:
    build:
      context: ./apps/explorer
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    volumes:
      - ./apps/explorer:/var/explorer
      - ./apps/common:/var/common
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:ethvm.${DOMAIN}'
      - 'traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||Access-Control-Allow-Credentials:true'
      - 'traefik.frontend.passHostHeader=true'
      - 'traefik.backend=explorer'
      - 'traefik.port=8080'
    cpu_shares: 256

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    volumes:
      - ./apps/api:/var/api
      - ./apps/common:/var/common
    depends_on:
      - mongodb
    networks:
      - back
    labels:
      - "traefik.enable=true"
      - "traefik.default.protocol=http"
      - "traefik.frontend.rule=Host:api.ethvm.${DOMAIN}"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:http://ethvm.${DOMAIN}||Access-Control-Allow-Credentials:true"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.backend=api"
      - "traefik.port=3000"
    cpu_shares: 512

  mongodb:
    image: enkryptio/mongodb-dev:${MONGODB_VERSION}
    restart: unless-stopped
    volumes:
      - mongodb-volume:/data/db
      - ./datasets:/datasets
    networks:
      - back
    ports:
      - 27017:27017
    cpu_shares: 4000

  zookeeper:
    image: confluentinc/cp-zookeeper:${CP_VERSION}
    volumes:
      - zookeeper-volume:/var/lib/zookeeper
    networks:
      back:
        ipv4_address: 172.25.0.103
    ports:
      - 2181:2181
      - 9585:9585
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: "server.1=zookeeper:2888:3888"
      ZOOKEEPER_CLIENT_PORT: 2181
      KAFKA_JMX_PORT: 9585
    mem_limit: 512m

  kafka-1:
    image: confluentinc/cp-kafka:${CP_VERSION}
    restart: unless-stopped
    depends_on:
      - zookeeper
    volumes:
      - kafka-volume-1:/var/lib/kafka
    networks:
      back:
        ipv4_address: 172.25.0.104
    ports:
      - 9091:9091
      - 9586:9586
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka-1"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-1:9091"
      KAFKA_ZOOKEEPER_CONNECT:
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CONFLUENT_SUPPORT_METRICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9586
    mem_limit: 4g

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:${CP_VERSION}
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka-1
    networks:
      back:
        ipv4_address: 172.25.0.107
    ports:
      - 8081:8081
      - 9587:9587
    labels:
      - "traefik.enable=true"
      - "traefik.default.protocol=http"
      - "traefik.frontend.rule=Host:kafka-schema-registry.ethvm.${DOMAIN}"
      - "traefik.port=8081"
      - "traefik.backend=kafka-schema-registry"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-1:9091"
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"
      SCHEMA_REGISTRY_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      KAFKA_JMX_PORT: 9587
    mem_limit: 512m
    cpu_shares: 512

  kafka-connect:
    image: confluentinc/cp-kafka-connect:${CP_VERSION}
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka-1
      - mongodb
      - kafka-schema-registry
    networks:
      - back
    ports:
      - 8083:8083
      - 9588:9588
    volumes:
      - ./out/kafka-connect/:/usr/share/enkryptio
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:9091
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "ethvm-kafka-connect"
      CONNECT_STATUS_STORAGE_TOPIC: "ethvm-storage-topic"
      CONNECT_CONFIG_STORAGE_TOPIC: "ethvm-storage-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "ethvm-storage-offsets"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_COMMIT_INTERVAL_MS: 1000
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL}
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL}
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,io.enkrypt.kafka.connect=TRACE,org.web3j.protocol.websocket.WebSocketService=WARN"
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components,/usr/share/enkryptio
      KAFKA_JMX_PORT: 9588
    cpu_shares: 3000
    mem_limit: 4g

  # ///////////////////////////////////////////////////////
  # Extra Tools (Useful for debugging and helping on Kafka)
  # ///////////////////////////////////////////////////////

  verifier:
    build:
      context: ./apps/verifier
    networks:
      - back
    depends_on:
      - mongodb
      - kafka-schema-registry
    volumes:
      - ./apps/verifier:/usr/src/app
      - ./apps/common:/usr/src/common
    command: sh -c "yarn install && yarn start kafka"
    environment:
      KAFKA_AVRO_LOG_LEVEL: debug

  ksql-server:
    image: confluentinc/cp-ksql-server:${CP_VERSION}
    networks:
      - back
    ports:
      - 8088:8088
    depends_on:
      - kafka-1
      - kafka-schema-registry
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka-1:9091
      KSQL_LISTENERS: http://0.0.0.0:8088/
      KSQL_KSQL_SERVICE_ID: ksql_service_1
      KSQL_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL}
    mem_limit: 4g

  ksql-cli:
    image: confluentinc/cp-ksql-cli:${CP_VERSION}
    networks:
      - back
    depends_on:
      - ksql-server
    tty: true
    entrypoint: /bin/bash

  lenses:
    image: landoop/lenses:2.1
    networks:
      - back
    ports:
      - 9991:9991
      - 9102:9102
    environment:
      LICENSE_URL: "${LENSES_LICENSE_URL}"
      LENSES_PORT: 9991
      LENSES_KAFKA_BROKERS: "PLAINTEXT://kafka-1:9091"
      LENSES_ZOOKEEPER_HOSTS: |
        [ { url:"zookeeper:2181", jmx:"zookeeper:9585" } ]
      LENSES_SCHEMA_REGISTRY_URLS: |
        [ { url:"http://kafka-schema-registry:8081", jmx:"kafka-schema-registry:9587" } ]
      LENSES_CONNECT_CLUSTERS: |
        [
          {
            name:"ethvm",
            urls: [ {url:"http://kafka-connect:8083", jmx:"kafka-connect:9588"} ],
            statuses:"ethvm-storage-topic",
            configs:"ethvm-storage-config",
            offsets:"ethvm-storage-offsets"
          }
        ]
      LENSES_SECURITY_MODE: BASIC
      LENSES_SECURITY_GROUPS: |
        [
          { "name": "adminGroup", "roles": ["Admin"] }
        ]
      LENSES_SECURITY_USERS: |
        [
          { "username": "admin", "password": "admin", "displayname": "Lenses Admin", "groups": ["adminGroup"] }
        ]
    cpu_shares: 512
