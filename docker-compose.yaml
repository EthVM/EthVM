version: '3.7'

networks:

  web:
    external: false

  back:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24

volumes:

  timescale-volume:

  kafka-volume-1:

  zookeeper-volume:

services:

  # ///////////////////////////////////////////////////////
  # Front Services
  # ///////////////////////////////////////////////////////

  traefik:
    image: ethvm/traefik:0.1.6
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - web
      - back
    ports:
      - 80:80
      - 8080:8080
    environment:
      DEBUG: 'true'
      LETS_ENCRYPT_ENABLED: 'false'
      SWARM_MODE: 'false'
      TRAEFIK_DASHBOARD_ENABLED: 'true'
      TRAEFIK_PING_ENABLED: 'false'

  explorer:
    build:
      context: ./apps/explorer
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    volumes:
      - ./apps/explorer:/var/explorer
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:${DOMAIN}'
      - 'traefik.backend=explorer'
      - 'traefik.port=8080'

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./apps/api:/var/www/api
    depends_on:
      - timescale
    networks:
      - back
    ports:
      - 3000:3000
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:api.${DOMAIN}'
      - 'traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:http://${DOMAIN}||Access-Control-Allow-Credentials:true'
      - 'traefik.frontend.passHostHeader=true'
      - 'traefik.backend=api'
      - 'traefik.port=3000'
      - 'traefik.frontend.entryPoints=http,https,ws,wss'
    environment:
      GRAPHQL_PLAYGROUND: 'true'
      INSTA_MINING: '${PARITY_INSTA_MINING}'
    command: bash -c "yarn && yarn start:dev"

  # ///////////////////////////////////////////////////////
  # Ethereum Client
  # ///////////////////////////////////////////////////////

  parity:
    image: ethvm/parity:stable-ethvm
    networks:
      - back
    volumes:
      - ${PARITY_VOLUME_MOUNTPOINT}:/home/parity/.local/share/io.parity.ethereum/
    ports:
      - 8545:8545
      - 8546:8546
      - 30303:30303
    # By default we have enabled a private ethereum network (amarok) to be used in development
    # If you want, also there's the option to use ropsten or even mainnet to test with real networks.
    # Just uncomment below line:
    command: --chain ${PARITY_CHAIN} --tracing on --pruning archive --ws-interface 0.0.0.0 --ws-origins * --ws-hosts * --jsonrpc-interface 0.0.0.0 --min-peers=${PARITY_MIN_PEERS} --max-peers ${PARITY_MAX_PEERS}
    # command: --config /home/parity/amarok-config.toml --tracing on --pruning archive --ws-interface 0.0.0.0 --ws-origins * --ws-hosts * --ws-port 8546 --jsonrpc-interface 0.0.0.0 --min-peers=${PARITY_MIN_PEERS} --max-peers ${PARITY_MAX_PEERS}
#    command: --config dev-insecure --reseal-min-period 10000 -lminer=trace --ws-apis all --tracing on --pruning archive --ws-interface 0.0.0.0 --ws-origins * --ws-hosts * --jsonrpc-interface 0.0.0.0 --min-peers=${PARITY_MIN_PEERS} --max-peers ${PARITY_MAX_PEERS}

  # ///////////////////////////////////////////////////////
  # Storage
  # ///////////////////////////////////////////////////////

  timescale:
    image: timescale/timescaledb:${TIMESCALE_VERSION}
    restart: unless-stopped
    shm_size: 1g
    volumes:
      - timescale-volume:/var/lib/postgresql/data
    networks:
      - back
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
      POSTGRES_DB:

  # ///////////////////////////////////////////////////////
  # Processing
  # ///////////////////////////////////////////////////////

  zookeeper:
    image: confluentinc/cp-zookeeper:${CP_VERSION}
    volumes:
      - zookeeper-volume:/var/lib/zookeeper
    networks:
      back:
        ipv4_address: 172.25.0.103
    ports:
      - 2181:2181
      - 9585:9585
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: "server.1=zookeeper:2888:3888"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_JMX_PORT: 9585

  kafka-1:
    image: confluentinc/cp-kafka:${CP_VERSION}
    restart: unless-stopped
    depends_on:
      - zookeeper
    volumes:
      - kafka-volume-1:/var/lib/kafka
    networks:
      back:
        ipv4_address: 172.25.0.104
    ports:
      - 9091:9091
      - 9586:9586
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka-1"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-1:9091"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_COMPRESSION_TYPE: "zstd"
      KAFKA_PRODUCER_MAX_REQUEST_SIZE: 52428800
      KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES: 10485760
      KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS: 120000
      KAFKA_MESSAGE_MAX_BYTES: 52428800
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_TOPIC_DELETE_ENABLE: 'true'
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-1:9091
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_JMX_PORT: 9586

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:${CP_VERSION}
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka-1
    networks:
      back:
        ipv4_address: 172.25.0.107
    ports:
      - 8081:8081
      - 9587:9587
    labels:
      - "traefik.enable=true"
      - "traefik.default.protocol=http"
      - "traefik.frontend.rule=Host:kafka-schema-registry.${DOMAIN}"
      - "traefik.port=8081"
      - "traefik.backend=kafka-schema-registry"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-1:9091"
      SCHEMA_REGISTRY_KAFKASTORE_TIMEOUT_MS: 10000
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"
      SCHEMA_REGISTRY_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      SCHEMA_REGISTRY_JMX_PORT: 9587

  kafka-connect:
    build:
      context: apps/processing/connectors
      dockerfile: ./Dockerfile.dev
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-schema-registry
    networks:
      - back
    ports:
      - 8083:8083
      - 9588:9588
    volumes:
      - ./out/kafka-connect/:/usr/share/ethvm
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:9091
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "ethvm-kafka-connect"
      CONNECT_STATUS_STORAGE_TOPIC: "ethvm-storage-topic"
      CONNECT_CONFIG_STORAGE_TOPIC: "ethvm-storage-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "ethvm-storage-offsets"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_COMMIT_INTERVAL_MS: 1000
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL}
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL}
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "WARN"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,io.confluent.connect.jdbc=DEBUG,com.ethvm.kafka.connect=WARN,org.web3j.protocol.websocket.WebSocketService=WARN"
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components,/usr/share/ethvm
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 52428800
      CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES: 10485760
      CONNECT_CONSUMER_MAX_POLL_RECORDS: 5000
      CONNECT_CONSUMER_FETCH_MIN_BYTES: 1000000
      CONNECT_CONSUMER_FETCH_WAIT_MAX_MS: 1000
      CONNECT_MAX_POLL_INTERVAL_MS: 120000
      KAFKA_JMX_PORT: 9588

  # ///////////////////////////////////////////////////////
  # Extra Tools (Useful for debugging and helping in dev)
  # ///////////////////////////////////////////////////////

  grafana:
    image: grafana/grafana:6.1.6
    networks:
      - back
    environment:
      GF_SERVER_ROOT_URL: 'http://grafana.${DOMAIN}'
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:grafana.${DOMAIN}'
      - 'traefik.backend=grafana'
      - 'traefik.port=3000'

  kafka-connect-ui:
    image: landoop/kafka-connect-ui
    networks:
      - back
    ports:
      - 8000:8000
    environment:
      CONNECT_URL: http://kafka-connect:8083

  kafka-manager:
    image: ethvm/kafka-manager:2.0.0.2
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka-1
    networks:
      - back
    ports:
      - 9000:9000
    environment:
      ZK_HOSTS: zookeeper:2181

  pgweb:
    image: sosedoff/pgweb:0.11.2
    restart: unless-stopped
    depends_on:
      - timescale
    networks:
      - back
    ports:
      - 8082:8082
    command: "/usr/bin/pgweb --bind=0.0.0.0 --listen=8082 --url postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescale:5432/${POSTGRES_DB}?sslmode=disable"
