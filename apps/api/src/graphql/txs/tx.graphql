type Query {

  transactionSummaries(fromBlock: BigNumber, offset: Int = 0, limit: Int = 20): TransactionSummaryPage!

  transactionSummariesForBlockNumber(number: BigNumber!, offset: Int = 0, limit: Int = 20): TransactionSummaryPage!
  transactionSummariesForBlockHash(hash: String!, offset: Int = 0, limit: Int = 20): TransactionSummaryPage!
  transactionSummariesForAddress(address: String!, filter: FilterEnum = all, offset: Int = 0, limit: Int = 20): TransactionSummaryPage!

  tx(hash: String!): Transaction
}

type Subscription {
  newTransaction: TransactionSummary!
  newTransactions: [TransactionSummary!]!
}

type TransactionSummary {
  hash: String!
  blockNumber: BigNumber!
  transactionIndex: Int!
  from: String!
  to: String
  creates: String
  contractName: String
  contractSymbol: String
  value: BigNumber!
  fee: BigNumber!
  successful: Boolean!
  timestamp: Date!
}

type TransactionSummaryPage {
  items: [TransactionSummary!]!
  totalCount: Int!
}

type Transaction {
  hash: String!
  nonce: BigNumber!
  blockHash: String!
  blockNumber: BigNumber!
  transactionIndex: Int!
  from: String!
  to: String
  value: BigNumber!
  gas: BigNumber!
  gasPrice: BigNumber!
  input: Buffer!
  v: String!
  r: String!
  s: String!
  timestamp: Date!
  creates: String
  chainId: String
  receipt: Receipt
  trace: Trace
  successful: Boolean!
}

type Receipt {
  transactionHash: String!
  transactionIndex: String!
  blockHash: String!
  blockNumber: BigNumber!
  from: String!
  to: String
  contractAddress: String
  cumulativeGasUsed: BigNumber!
  gasUsed: BigNumber!
  logs: String!
  logsBloom: String!
  root: String!
  status: String
}

type Trace {
  blockHash: String!
  transactionHash: String
  rootError: String
  traces: String!
}

enum Order {
  asc, desc
}
