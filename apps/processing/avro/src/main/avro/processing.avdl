@namespace("io.enkrypt.avro.processing")
protocol Processing {

  import idl "common.avdl";
  import idl "capture.avdl";

  record ReorgKeyRecord {

    union { null, bytes } blockHash = null;
    union { null, bytes } txHash = null;
    union { null, bytes } address = null;

    union { null, bytes } blockNumber = null;
    union { null, bytes } nonce = null;
    union { null, string } name = null;

  }

  record TokenTransferKeyRecord {
    bytes hash;
  }

  enum BalanceType {
    TX_FEE, REWARD, ETHER, ERC20, ERC721
  }

  record TokenTransferRecord {

    BalanceType transferType = "ETHER";

    bytes from;
    bytes to;

    union { null, bytes } contract = null;

    union { null, bytes } amount = null;
    union { null, bytes } tokenId = null;
    union { null, long } timestamp = null;                        // block timestamp in seconds since epoch
  }

  record TokenBalanceKeyRecord {

    BalanceType balanceType = "ETHER";
    union { null, bytes } contract = null;
    union { null, bytes } address = null;
    union { null, bytes } tokenId = null;

  }

  record TokenBalanceRecord {

    union { null, bytes } amount = null;
    union { null, bytes } address = null;

  }

  // contracts

  record ContractKeyRecord {
    bytes address;
  }

  record ContractCreateRecord {
    io.enkrypt.avro.common.ContractType type;
    bytes creator;
    bytes address;
    bytes data;
  }

  record ContractDestroyRecord {
    bytes address;
    bytes refundAddress;
    bytes balance;
  }

  record DaoHfBalanceTransferRecord {
    bytes from;
    bytes to;
    bytes amount;
  }

  record PremineBalanceRecord {
    bytes address;
    bytes balance;
  }

  record TxFeeRecord {
    bytes from;
    bytes amount;
    bytes miner;
  }

  enum ChainEventType {
    PREMINE_BALANCE,
    REWARD,
    DAO_HF_BALANCE_TRANSFER,
    TOKEN_TRANSFER,
    CONTRACT_CREATE,
    CONTRACT_DESTROY,
    TX_FEE
  }

  record ChainEventRecord {

    boolean reverse = false;
    long timestamp;

    ChainEventType `type`;

    union { io.enkrypt.avro.capture.BlockRewardRecord, TxFeeRecord, PremineBalanceRecord, TokenTransferRecord, ContractCreateRecord, ContractDestroyRecord, DaoHfBalanceTransferRecord } value;

    union { null, bytes } blockHash = null;
    union { null, bytes } txHash = null;
    union { null, int } txIndex = null;
    union { null, array<int> } traceAddress = null;

  }

  record ContractLogoRecord {
    union { null, string } src;
    union { null, string } width;
    union { null, string } height;
    union { null, string } ipfs_hash;
  }

  record ContractSupportRecord {
    union { null, string } email;
    union { null, string } url;
  }

  record ContractSocialRecord {
    union { null, string } blog;
    union { null, string } chat;
    union { null, string } facebook;
    union { null, string } forum;
    union { null, string } github;
    union { null, string } gitter;
    union { null, string } instagram;
    union { null, string } linkedin;
    union { null, string } reddit;
    union { null, string } slack;
    union { null, string } telegram;
    union { null, string } twitter;
    union { null, string } youtube;
  }

  record ContractMetadataRecord {

    string name;
    string symbol;
    bytes address;
    int decimals;

    union { null, string } ens_address;
    union { null, string, io.enkrypt.avro.common.ContractType } type;
    union { null, ContractLogoRecord } logo;
    union { null, ContractSupportRecord } support;
    union { null, ContractSocialRecord } social;
    union { null, string } website;

  }

  // block events

  record BlockChainEventsRecord {
    array<ChainEventRecord> events;
  }

  // metrics

  record BlockMetricsRecord {
    bytes hash;
    bytes number;
    union { null, long } blockTime = null;
    long timestamp;
    int totalTxs = 0;
    int numSuccessfulTxs = 0;
    int numFailedTxs = 0;
    int numPendingTxs = 0;
    int numUncles = 0;
    bytes difficulty;
    bytes totalDifficulty;
    bytes totalGasPrice;
    bytes avgGasLimit;
    bytes avgGasPrice;
    bytes totalTxFees;
    bytes avgTxFees;
  }

  record MetricKeyRecord {
    long `date`;
    string name;
  }

  record MetricRecord {

    union { null, int } `int` = null;
    union { null, long } `long` = null;
    union { null, float } `float` = null;
    union { null, double } `double` = null;
    union { null, bytes } `bigInteger` = null;

  }

  // Processing Metadata

  record ProcessingMetadataKeyRecord {
    string name;
  }

  record ProcessingMetadataRecord {
    union { null, string } `string` = null;
    union { null, boolean } `boolean` = null;
    union { null, int } `int` = null;
    union { null, long } `long` = null;
    union { null, float } `float` = null;
    union { null, double } `double` = null;
    union { null, bytes } `bigInteger` = null;
  }

  // address metadata

  enum AddressMetadataType {
    OUT_TX_COUNT, IN_TX_COUNT, TOTAL_TX_COUNT, MINER, CONTRACT_CREATOR
  }

  record AddressMetadataKeyRecord {
    bytes address;
    AddressMetadataType type;
  }

  record AddressMetadataRecord {
    union { null, long } count = null;
    union { null, boolean } flag = null;
  }

}

