@namespace("io.enkrypt.avro.capture")
protocol Capture {

  import idl "common.avdl";

  record BlockKeyRecord {
    bytes number;
  }

  record UncleKeyRecord {
    bytes uncleHash;
  }

  record TransactionKeyRecord {
    bytes txHash;
  }

  record LogRecord {

    bytes address;
    bytes data;
    array<bytes> topics = [];

  }

  record TraceRewardActionRecord {
    bytes author;
    bytes value;
    string rewardType;
  }

  record TraceCallActionRecord {
    string callType;
    bytes from;
    union { null, bytes } to = null;
    bytes gas;
    union { null, bytes } input = null;
    bytes value;
  }

  record TraceCreateActionRecord {
    bytes from;
    bytes gas;
    bytes value;
    bytes init;
  }

  record TraceDestroyActionRecord {
    bytes address;
    bytes balance;
    bytes refundAddress;
  }

  record TraceResultRecord {
    union{ null, bytes } address = null;
    union { null, bytes } code = null;
    bytes gasUsed;
    union { null, bytes } output = null;
  }

  record TraceRecord {

    union { TraceRewardActionRecord, TraceCallActionRecord, TraceCreateActionRecord, TraceDestroyActionRecord } action;
    union { null, string } `error` = null;
    union { null, TraceResultRecord } result = null;
    int subtraces;
    array<int> traceAddress;
    string type;
    bytes blockHash;
    bytes blockNumber;
    bytes transactionHash;
    int transactionPosition;

  }

  record TransactionReceiptRecord {

    union { null, bytes } blockHash = null;         // hash of the block where this transaction was in
    union { null, bytes } blockNumber = null;                               // integer block number where this transaction was in

    union { null, bytes } transactionHash = null;   // hash of the transaction this receipt is for
    union { null, int } transactionIndex = null;                            // integer of the transactions index position in the block

    union { null, bytes } contractAddress = null;   // The contract address created, if the transaction was a contract creation, otherwise null.

    bytes cumulativeGasUsed;                                                // The total amount of gas used when this transaction was executed in the block.
    bytes gasUsed;                                                          // The amount of gas used by this specific transaction alone.

    array<LogRecord> logs = [];                                             // Array of log objects, which this transaction generated.
    bytes logsBloom;                               // A bloom filter of logs/events generated by contracts during transaction execution. Used to efficiently rule out transactions without expected logs.

    union { null, bytes } root = null;              // Merkle root of the state trie after the transaction has been executed (optional after Byzantium hard fork EIP609)
    union { null, bytes } status = null;                                    // Quantity - 0x0 indicates transaction failure , 0x1 indicates transaction success. Set for blocks mined after Byzantium hard fork EIP609, null before.

    int numInternalTxs;
    array<TraceRecord> traces;
  }

  record TransactionRecord {

    bytes hash;                             // hash of the transaction.
    bytes nonce;                                                    // integer the number of transactions made by the sender prior to this one.

    union { null, bytes } blockHash = null; // hash of the block where this transaction was in
    union { null, bytes } blockNumber = null;                       // integer block number where this transaction was in
    union { null, int } transactionIndex = null;                    // integer of the transactions index position in the block, null when it's pending

    bytes from;                             // address of the sender
    union { null, bytes } to = null;        // address of the receiver. null when its a contract creation transaction.

    bytes value;                                                    // value transferred in Wei.
    bytes gasPrice;                                                 // gas price provided by the sender in Wei.
    bytes gas;                                                      // gas provided by the sender.

    union { null, bytes } input = null;                             // the data send along with the transaction.

    long v;                                                         // integer - the standardised V field of the signature
    bytes r;                                                        // integer
    bytes s;                                                        // integer

    union { null, bytes } creates = null;  // created contract hash

    union { null, long } chainId = null;                           // chain id of the transaction, if any
    union { null, bytes } raw = null;                               // raw rlp transaction data

    union { null, long } timestamp = null;                        // block timestamp in seconds since epoch

    union { null, TransactionReceiptRecord } receipt = null;      // optional embedded receipt
  }

  record BlockHeaderRecord {

    union { null, bytes } number = null;                          // The block number. null when its pending block

    bytes hash;                           // hash of the block. null when its pending block
    bytes parentHash;                     // hash of the parent block
    union { null, bytes } nonce;           // hash of the generated proof-of-work. null when its pending block. Missing in case of PoA.
    bytes sha3Uncles;                     // SHA3 of the uncles data in the block
    bytes logsBloom;                     // the bloom filter for the logs of the block. null when its pending block
    bytes transactionsRoot;               // the root of the transaction trie of the block
    bytes stateRoot;                      // the root of the final state trie of the block
    bytes receiptsRoot;                   // the root of the receipts trie of the block

    bytes @aliases(["miner"]) author;     // the address of the author of the block (the beneficiary to whom the mining rewards were given)

    bytes difficulty;                                             // integer of the difficulty for this block
    union { null, bytes } extraData = null;                       // the ‘extra data’ field of this block

    bytes gasLimit;                                               // the maximum gas allowed in this block
    bytes gasUsed;                                                // the total used gas by all transactions in this block

    long timestamp;                                               // the unix timestamp for when the block was collated
    long size;

    union { null, bytes } blockNumber = null;                     // block number this header relates to when an uncle
    union { null, int } uncleIndex = null;                        // index in the uncles array of this header if it was included in the uncles list
    union { null, bytes } uncleReward = null;                     // block reward for inclusion of this uncle header

    union { null, bytes } raw = null;                             // raw block data

  }

  record BlockRewardRecord {
    string rewardType;
    bytes author;
    bytes value;
  }

  record BlockRecord {

    BlockHeaderRecord header;

    bytes totalDifficulty;                                        // integer of the total difficulty of the chain until this block
    array<TransactionRecord> transactions = [];                   // array of transaction objects

    bytes sha3Uncles;                     // hash of uncles
    array<bytes> uncleHashes;              // each uncle hash
    array<BlockHeaderRecord> uncles = [];                         // array of uncle headers

    array<BlockRewardRecord> rewards = [];

    boolean reverse = false;                                      // whether this block summary should be applied or reversed from cumulative state
    int numPendingTxs = 0;                                        // count as of time of processing

    union { null, long } blockTime = null;                        //
  }

}
