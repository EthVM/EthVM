@namespace("com.ethvm.avro.capture")
protocol Capture {

  import idl "common.avdl";

  record ParitySyncStateKeyRecord {
    string source;
  }

  record ParitySyncStateRecord {
    string source;
    long timestamp;
    decimal(80, 0) number;
    decimal(80, 0) head;
  }

  record CanonicalKeyRecord {
    decimal(80, 0) number;
  }

  record CanonicalRecord {
    string blockHash;
    array<string> txHashes;
  }

  record LogRecord {
    string address;
    string data;
    array<string> topics = [];
  }

  record TraceRewardActionRecord {
    string author;
    decimal(80, 0) value;
    string rewardType;
  }

  record TraceCallActionRecord {
    string callType;
    string from;
    union { null, string } to = null;
    decimal(80, 0) gas;
    union { null, bytes } input = null;
    decimal(80, 0) value;
  }

  record TraceCreateActionRecord {
    string from;
    decimal(80, 0) gas;
    decimal(80, 0) value;
    string init;
  }

  record TraceDestroyActionRecord {
    string address;
    decimal(80, 0) balance;
    string refundAddress;
  }

  record TraceResultRecord {
    union{ null, string } address = null;
    union { null, string } code = null;
    decimal(80, 0) gasUsed;
    union { null, string } output = null;
  }

  record TraceRecord {

    union { TraceRewardActionRecord, TraceCallActionRecord, TraceCreateActionRecord, TraceDestroyActionRecord } action;
    union { null, string } `error` = null;
    union { null, TraceResultRecord } result = null;
    int subtraces;
    array<int> traceAddress;
    string type;
    string blockHash;
    decimal(80, 0) blockNumber;

    union { null, long } timestamp = null;
    union { null, string } transactionHash;
    union { null, int } transactionPosition;

  }

  record TraceListRecord {
    union { null, string } rootError = null;
    long timestamp;
    int traceCount;
    array<TraceRecord> traces;
  }

  record TransactionReceiptRecord {

    union { null, string } blockHash = null;            // hash of the block where this transaction was in
    union { null, decimal(80, 0) } blockNumber = null;  // integer block number where this transaction was in

    union { null, long } timestamp = null;

    string from;
    union { null, string } to = null;

    union { null, string } transactionHash = null;      // hash of the transaction this receipt is for
    union { null, int } transactionIndex = null;        // integer of the transactions index position in the block

    union { null, string } contractAddress = null;      // The contract address created, if the transaction was a contract creation, otherwise null.

    decimal(80, 0) cumulativeGasUsed;                   // The total amount of gas used when this transaction was executed in the block.
    decimal(80, 0) gasUsed;                             // The amount of gas used by this specific transaction alone.

    array<LogRecord> logs = [];                         // Array of log objects, which this transaction generated.
    string logsBloom;                                   // A bloom filter of logs/events generated by contracts during transaction execution. Used to efficiently rule out transactions without expected logs.

    union { null, string } root = null;                 // Merkle root of the state trie after the transaction has been executed (optional after Byzantium hard fork EIP609)
    union { null, string } status = null;               // Quantity - 0x0 indicates transaction failure , 0x1 indicates transaction success. Set for blocks mined after Byzantium hard fork EIP609, null before.
  }

  record TransactionReceiptListRecord {
    long timestamp;   
    array<TransactionReceiptRecord> receipts;
  }

  record TransactionRecord {

    string transactionHash;                            // hash of the transaction.
    decimal(80, 0) nonce;                               // integer the number of transactions made by the sender prior to this one.

    union { null, string } blockHash = null;            // hash of the block where this transaction was in
    union { null, decimal(80, 0) } blockNumber = null;  // integer block number where this transaction was in
    union { null, int } transactionIndex = null;        // integer of the transactions index position in the block, null when it's pending

    string from;                                        // address of the sender
    union { null, string } to = null;                   // address of the receiver. null when its a contract creation transaction.

    decimal(80, 0) value;                               // value transferred in Wei.
    decimal(80, 0) gasPrice;                            // gas price provided by the sender in Wei.
    decimal(80, 0) gas;                                 // gas provided by the sender.

    union { null, bytes } input = null;                 // the data send along with the transaction.

    long v;                                             // the standardised V field of the signature
    string r;
    string s;

    union { null, long } timestamp = null;

    union { null, string } creates = null;              // created contract hash

    union { null, long } chainId = null;                // chain id of the transaction, if any
  }

  record TransactionListRecord {
    string blockHash;
    long timestamp;   
    array<TransactionRecord> transactions;
  }

  record BlockHeaderRecord {

    decimal(80, 0) number;                              // the block number

    string hash;                                        // hash of the block. null when its pending block
    string parentHash;                                  // hash of the parent block
    union { null, decimal(80, 0) } nonce;               // hash of the generated proof-of-work. null when its pending block. Missing in case of PoA.
    string sha3Uncles;                                  // SHA3 of the uncles data in the block
    string logsBloom;                                   // the bloom filter for the logs of the block. null when its pending block
    string transactionsRoot;                            // the root of the transaction trie of the block
    string stateRoot;                                   // the root of the final state trie of the block
    string receiptsRoot;                                // the root of the receipts trie of the block

    string @aliases(["miner"]) author;                  // the address of the author of the block (the beneficiary to whom the mining rewards were given)

    decimal(80, 0) difficulty;                          // integer of the difficulty for this block
    decimal(80, 0) totalDifficulty;
    union { null, string } extraData = null;            // the ‘extra data’ field of this block

    decimal(80, 0) gasLimit;                            // the maximum gas allowed in this block
    decimal(80, 0) gasUsed;                             // the total used gas by all transactions in this block

    long timestamp;                               
    long size;

    int transactionCount;
    array<string> transactionHashes = [];

    int uncleCount;
    array<string> uncleHashes = [];

    union { null, int } blockTime = null;

  }

  record UncleRecord {

    int index;                                            // ordinal position within the block
    decimal(80, 0) number;                                // the uncle number
    decimal(80, 0) height;                                // the block height number where it appeared
    string nephewHash;

    string hash;
    string parentHash;
    union { null, decimal(80, 0) } nonce;
    string sha3Uncles;
    string logsBloom;
    string transactionsRoot;
    string stateRoot;
    string receiptsRoot;

    string @aliases(["miner"]) author;

    decimal(80, 0) difficulty;
    decimal(80, 0) totalDifficulty;
    union { null, string } extraData = null;

    decimal(80, 0) gasLimit;
    decimal(80, 0) gasUsed;

    long timestamp;
    long size;

  }

  record UncleListRecord {
    long timestamp;   
    array<UncleRecord> uncles;
  }

// contracts

  record ContractLogoRecord {
    union { null, string } src = null;
    union { null, string } width = null;
    union { null, string } height = null;
    union { null, string } ipfs_hash = null;
  }

  record ContractSupportRecord {
    union { null, string } email = null;
    union { null, string } url = null;
  }

  record ContractSocialRecord {
    union { null, string } blog = null;
    union { null, string } chat = null;
    union { null, string } facebook = null;
    union { null, string } forum = null;
    union { null, string } github = null;
    union { null, string } gitter = null;
    union { null, string } instagram = null;
    union { null, string } linkedin = null;
    union { null, string } reddit = null;
    union { null, string } slack = null;
    union { null, string } telegram = null;
    union { null, string } twitter = null;
    union { null, string } youtube = null;
  }

  record EthListRecord {

    union { null, string } name = null;
    union { null, string } symbol = null;
    union { null, string } address = null;
    union { null, int } decimals = null;

    union { null, string } ensAddress = null;
    union { null, com.ethvm.avro.common.ContractType } type = null;
    union { null, ContractLogoRecord } logo = null;
    union { null, ContractSupportRecord } support = null;
    union { null, ContractSocialRecord } social = null;
    union { null, string } website = null;

  }

  enum ContractLifecyleType {
    CREATE, DESTROY
  }

  record ContractLifecycleRecord {

    string address;
    ContractLifecyleType type;

    boolean reverse = false;

    union { null, string } creator = null;
    union { null, string } init = null;
    union { null, string } code = null;
    union { null, com.ethvm.avro.common.ContractType } contractType = null;
    union { null, com.ethvm.avro.common.TraceLocationRecord } createdAt = null;

    union { null, string } refundAddress = null;
    union { null, decimal(80, 0) } refundBalance = null;
    union { null, com.ethvm.avro.common.TraceLocationRecord } destroyedAt = null;

    timestamp_ms timestamp = 0;
  }

  record ContractLifecycleListRecord {

    boolean apply = true;
    timestamp_ms timestamp = 0;
    array<ContractLifecycleRecord> deltas = [];
    array<ContractLifecycleRecord> reversals = [];
    union { null, string } blockHash = null;

  }

  record ContractRecord {

    union{ null, string } address = null;
    union { null, string } creator = null;
    union { null, string } init = null;
    union { null, string } code = null;
    union { null, com.ethvm.avro.common.ContractType } contractType = null;
    union { null, string } refundAddress = null;
    union { null, decimal(80, 0) } refundBalance = null;

    union { null, com.ethvm.avro.common.TraceLocationRecord } traceCreatedAt = null;
    union { null, com.ethvm.avro.common.TraceLocationRecord } traceDestroyedAt = null;

    timestamp_ms timestamp = 0;

  }

  record ContractKeyRecord {
    string address;
  }

}
